@{
    ViewData["Title"] = "Teams";
    string userId = ViewData["UserId"].ToString();
}

<div id="SupervisingTeams" data-user="@userId" class="v-container" v-cloak>

    <h3> <i class="fa fa-users"></i> @ViewData["Title"] </h3>

    <h4 v-if="teams.isLoading" class="c-loading-title"></h4>

    <div class="c-box-view">
        <div v-if="teams.isLoading" class="c-box c-box--loading" v-for="i in [,,,]">
            <span class="c-box-title"></span>
        </div>
    </div>

    <h4 v-if="teams.message">{{teams.message}}</h4>

    <h4 v-if="!teams.isLoading && !teams.data.length">Nothing Here Yet! </h4>


    <div class="c-box-view ">
        <a class="c-box" :href="`/teams/${team.id}`" v-for="team in teams.data">

            <h5 class="c-box-title">{{team.name}}</h5>
            <p>{{getMembersText(team.membersCount)}}</p>
            <p>{{getProjectsText(team.projectsCount)}}</p>

            <section>
                <h5>Tasks Progress</h5>
                <div class="progress">
                    <div v-for="performance in getTeamPerformance(team.tasksPerformance)"
                         class="progress-bar"
                         :class="`task-status-linear--${performance.code}`"
                         role="progressbar"
                         :data-tooltip="performance.name"
                         :style="{'width':getPercentage(team.tasksPerformance,performance.fromProp)}">
                    </div>
                </div>
            </section>

            <section :data-team-activities="team.id">
                <h5>Activities</h5>
                <canvas id="myChart"
                        
                        width="250" height="120"></canvas>
            </section>
        </a>

    </div>

</div>


@section styles {
    <link href="~/css/SupervisingTeams.min.css" rel="stylesheet" />
}

@section scripts{

    <script src="~/services/TeamsService.js">
    </script>

    <script src="~/services/UsersService.js">
    </script>
    <script src="~/lib/chartjs-2.7.1/Chart.min.js"></script>
    @*<script src="https://unpkg.com/vue-chartjs/dist/vue-chartjs.min.js"></script>*@

    @*<script src="https://cdn.anychart.com/releases/8.9.0/js/anychart-base.min.js" type="text/javascript"></script>

        <script type="module">

            import { Line, mixins } from './vue-chartjs'
            const { reactiveProp } = mixins

            export default {
                extends: Line,
                mixins: [reactiveProp],
                props: ['options'],
                mounted() {
                    // this.chartData is created in the mixin.
                    // If you want to pass options please create a local options object
                    this.renderChart(this.chartData, this.options)
                }
            }
        </script>*@

    <script src="~/js/SupervisingTeams.js">
    </script>
}
